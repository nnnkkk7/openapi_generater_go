/*
 * generater sample
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A PetsApiController binds http requests to an api service and writes the service results to the http response
type PetsApiController struct {
	service PetsApiServicer
}

// NewPetsApiController creates a default api controller
func NewPetsApiController(s PetsApiServicer) Router {
	return &PetsApiController{ service: s }
}

// Routes returns all of the api route for the PetsApiController
func (c *PetsApiController) Routes() Routes {
	return Routes{ 
		{
			"CreatePets",
			strings.ToUpper("Post"),
			"/pets",
			c.CreatePets,
		},
		{
			"ListPets",
			strings.ToUpper("Get"),
			"/pets",
			c.ListPets,
		},
		{
			"ShowPetById",
			strings.ToUpper("Get"),
			"/pets/{petId}",
			c.ShowPetById,
		},
	}
}

// CreatePets - Create a pet
func (c *PetsApiController) CreatePets(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.CreatePets(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ListPets - List all pets
func (c *PetsApiController) ListPets(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ListPets(r.Context(), limit)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ShowPetById - Info for a specific pet
func (c *PetsApiController) ShowPetById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	petId := params["petId"]
	result, err := c.service.ShowPetById(r.Context(), petId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
